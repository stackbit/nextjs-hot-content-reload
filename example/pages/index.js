import Head from 'next/head';
import Image from 'next/image';
import * as React from 'react';
import ReactMarkdown from 'react-markdown';
import fs from 'fs';
import yaml from 'js-yaml';
import styles from '../styles/Home.module.css';
import { withHotContentReload } from '../../dist/hotContentReload';

function Home(props) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <Markdown inline={true}>{props.title}</Markdown>
        </h1>

        <p className={styles.description}>
          <Markdown inline={true}>{props.description}</Markdown>
        </p>

        <div className={styles.grid}>
          {props.grid.map((gridItem, index) => (
            <a key={index} href={gridItem.link} className={styles.card}>
              <h2>{gridItem.title}</h2>
              <p>{gridItem.text}</p>
            </a>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} loader={({ src }) => src} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export default withHotContentReload(Home);

function Markdown({ inline, children }) {
  return (
    <ReactMarkdown
      components={{
        ...(inline ? { p: React.Fragment } : null),
        code: ({ node, inline, children, ...props }) => {
          return (
            <code className={styles.code} {...props}>
              {children}
            </code>
          );
        }
      }}
    >
      {children}
    </ReactMarkdown>
  );
}

export function getStaticProps() {
  const yamlData = fs.readFileSync('content/index.yaml', 'utf-8');
  const props = yaml.load(yamlData);
  return { props };
}
